BEGIN;

-- ***********************************************************************************
--                              DROP TABLE
-- ***********************************************************************************

DROP TABLE IF EXISTS public.project_issue_type_workflow_defaults CASCADE;
DROP TABLE IF EXISTS public.project_members CASCADE;
DROP TABLE IF EXISTS public.user_groups CASCADE;
DROP TABLE IF EXISTS public.groups CASCADE;
DROP TABLE IF EXISTS public.role_permissions CASCADE;
DROP TABLE IF EXISTS public.permissions CASCADE;
DROP TABLE IF EXISTS public.roles CASCADE;
DROP TABLE IF EXISTS public.issue_watchers CASCADE;
DROP TABLE IF EXISTS public.issue_links CASCADE;
DROP TABLE IF EXISTS public.issue_link_types CASCADE;
DROP TABLE IF EXISTS public.attachments CASCADE;
DROP TABLE IF EXISTS public.file_types CASCADE;
DROP TABLE IF EXISTS public.activity_log CASCADE;
DROP TABLE IF EXISTS public.comments CASCADE;
DROP TABLE IF EXISTS public.notification_statuses CASCADE;
DROP TABLE IF EXISTS public.notification_queue CASCADE;
DROP TABLE IF EXISTS public.user_notification_settings CASCADE;
DROP TABLE IF EXISTS public.notification_templates CASCADE;
DROP TABLE IF EXISTS public.issues CASCADE;
DROP TABLE IF EXISTS public.projects CASCADE;
DROP TABLE IF EXISTS public.workflow_transitions CASCADE;
DROP TABLE IF EXISTS public.workflow_statuses CASCADE;
DROP TABLE IF EXISTS public.issue_statuses CASCADE;
DROP TABLE IF EXISTS public.issue_types CASCADE;
DROP TABLE IF EXISTS public.priorities CASCADE;
DROP TABLE IF EXISTS public.workflows CASCADE;
DROP TABLE IF EXISTS public.users CASCADE;

-- ***********************************************************************************
--                              CREATE TABLE
-- ***********************************************************************************

CREATE TABLE IF NOT EXISTS public.issue_types(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(50) COLLATE pg_catalog."default" NOT NULL,
icon_url character varying(255) COLLATE pg_catalog."default",
color_hex_code character varying(7) COLLATE pg_catalog."default",
CONSTRAINT issue_types_pkey PRIMARY KEY (id),
CONSTRAINT uk_issue_types_name UNIQUE (name));

COMMENT ON TABLE public.issue_types IS 'Определяет различные категории задач, которые могут быть созданы в системе (например, "Bug" (Баг), "Task" (Задача), "Story" (История), "Epic" (Эпик)). Позволяет классифицировать работу.';

COMMENT ON COLUMN public.issue_types.id IS 'Уникальный идентификатор типа задачи.';
COMMENT ON COLUMN public.issue_types.name IS 'Название типа задачи.';
COMMENT ON COLUMN public.issue_types.icon_url IS 'Путь к иконке для визуального представления типа задачи.';
COMMENT ON COLUMN public.issue_types.color_hex_code IS 'Шестнадцатеричный код цвета для визуального выделения типа задачи: #RRGGBB';

COMMENT ON CONSTRAINT uk_issue_types_name ON public.issue_types IS 'Значение поля `public.issue_types.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.issues(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
description text COLLATE pg_catalog."default",
key character varying(255) COLLATE pg_catalog."default" NOT NULL,
title character varying(255) COLLATE pg_catalog."default" NOT NULL,
updated_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
assignee_id bigint,
issue_type_id bigint,
priority_id bigint,
reporter_id bigint NOT NULL,
status_id bigint,
workflow_id bigint,
project_id bigint NOT NULL,
CONSTRAINT issues_pkey PRIMARY KEY (id),
CONSTRAINT uk_issues_key UNIQUE (key));

COMMENT ON TABLE public.issues IS 'Основная таблица, хранящая все задачи (Issues) в системе. Это могут быть баги, задачи, истории и т.д.';

COMMENT ON COLUMN public.issues.id IS 'Уникальный идентификатор задачи.';
COMMENT ON COLUMN public.issues.created_at IS 'Временная метка создания.';
COMMENT ON COLUMN public.issues.description IS 'Подробное описание задачи.';
COMMENT ON COLUMN public.issues.key IS 'Уникальный ключ задачи (например, "PROJ-123").';
COMMENT ON COLUMN public.issues.title IS 'Краткое описание задачи.';
COMMENT ON COLUMN public.issues.updated_at IS 'Временная метка последнего обновления.';
COMMENT ON COLUMN public.issues.assignee_id IS 'Ссылка на пользователя, которому назначена задача.';
COMMENT ON COLUMN public.issues.issue_type_id IS 'Ссылка на тип задачи.';
COMMENT ON COLUMN public.issues.priority_id IS 'Ссылка на приоритет задачи.';
COMMENT ON COLUMN public.issues.reporter_id IS 'Ссылка на пользователя, который создал (сообщил о) задачу.';
COMMENT ON COLUMN public.issues.status_id IS 'Ссылка на текущий статус задачи.';
COMMENT ON COLUMN public.issues.workflow_id IS 'Ссылка на рабочий процесс, который в данный момент используется для этой задачи.';
COMMENT ON COLUMN public.issues.project_id IS 'Ссылка на проект, к которому относится задача.';

COMMENT ON CONSTRAINT uk_issues_key ON public.issues IS 'Значение поля `public.issues.key` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.priorities(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
level integer NOT NULL,
name character varying(50) COLLATE pg_catalog."default" NOT NULL,
icon_url character varying(255) COLLATE pg_catalog."default",
color_hex_code character varying(7) COLLATE pg_catalog."default",
CONSTRAINT priorities_pkey PRIMARY KEY (id),
CONSTRAINT uk_priorities_name UNIQUE (name),
CONSTRAINT uk_priorities_level UNIQUE (level));

COMMENT ON TABLE public.priorities IS 'Определяет уровень срочности или важности задачи (например, "Highest" (Высочайший), "High" (Высокий), "Medium" (Средний), "Low" (Низкий)). Влияет на порядок выполнения задач.';

COMMENT ON COLUMN public.priorities.id IS 'Уникальный идентификатор приоритета.';
COMMENT ON COLUMN public.priorities.level IS 'Числовое значение, определяющее порядок сортировки или иерархию приоритетов.';
COMMENT ON COLUMN public.priorities.name IS 'Название приоритета.';
COMMENT ON COLUMN public.priorities.icon_url IS 'Путь к иконке для визуального представления приоритета.';
COMMENT ON COLUMN public.priorities.color_hex_code IS 'Шестнадцатеричный код цвета для визуального выделения приоритета: #RRGGBB';

COMMENT ON CONSTRAINT uk_priorities_name ON public.priorities IS 'Значение поля `public.priorities.name` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_priorities_level ON public.priorities IS 'Значение поля `public.priorities.level` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.projects(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(255) COLLATE pg_catalog."default" NOT NULL,
key character varying(50) COLLATE pg_catalog."default" NOT NULL,
description text COLLATE pg_catalog."default",
lead_id bigint NOT NULL,
default_workflow_id bigint,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT projects_pkey PRIMARY KEY (id),
CONSTRAINT uk_projects_key UNIQUE (key),
CONSTRAINT uk_projects_name UNIQUE (name));

COMMENT ON TABLE public.projects IS 'Представляет собой отдельные проекты, в рамках которых ведутся задачи. Каждый проект имеет своего руководителя, уникальный ключ и набор задач.';

COMMENT ON COLUMN public.projects.id IS 'Уникальный идентификатор проекта.';
COMMENT ON COLUMN public.projects.name IS 'Полное название проекта.';
COMMENT ON COLUMN public.projects.key IS 'Уникальный короткий ключ проекта (префикс, используемый в ключах задач, например, "PROJ").';
COMMENT ON COLUMN public.projects.description IS 'Описание проекта.';
COMMENT ON COLUMN public.projects.lead_id IS 'Ссылка на пользователя, который является руководителем проекта.';
COMMENT ON COLUMN public.projects.default_workflow_id IS 'Ссылка на рабочий процесс, который будет использоваться по умолчанию для задач в этом проекте, если не указан более специфический.';
COMMENT ON COLUMN public.projects.created_at IS 'Временная метка создания.';
COMMENT ON COLUMN public.projects.updated_at IS 'Временная метка последнего обновления.';

COMMENT ON CONSTRAINT uk_projects_key ON public.projects IS 'Значение поля `public.projects.key` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_projects_name ON public.projects IS 'Значение поля `public.projects.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.issue_statuses(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(50) COLLATE pg_catalog."default" NOT NULL,
CONSTRAINT issue_statuses_pkey PRIMARY KEY (id),
CONSTRAINT uk_issue_statuses_name UNIQUE (name));

COMMENT ON TABLE public.issue_statuses IS 'Определяет различные состояния, через которые может проходить задача в своем жизненном цикле (например, "Open" (Открыто), "In Progress" (В работе), "Resolved" (Решено), "Closed" (Закрыто)). Статусы являются частью рабочего процесса.';

COMMENT ON COLUMN public.issue_statuses.id IS 'Уникальный идентификатор статуса.';
COMMENT ON COLUMN public.issue_statuses.name IS 'Название статуса.';

COMMENT ON CONSTRAINT uk_issue_statuses_name ON public.issue_statuses IS 'Значение поля `public.issue_statuses.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.users(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
email character varying(255) COLLATE pg_catalog."default" NOT NULL,
username character varying(255) COLLATE pg_catalog."default" NOT NULL,
password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
CONSTRAINT users_pkey PRIMARY KEY (id),
CONSTRAINT uk_users_email UNIQUE (email),
CONSTRAINT uk_users_username UNIQUE (username));

COMMENT ON TABLE public.users IS 'Хранит информацию обо всех зарегистрированных пользователях системы. Это центральная сущность, к которой привязаны многие другие действия и объекты.';

COMMENT ON COLUMN public.users.id IS 'Уникальный идентификатор пользователя.';
COMMENT ON COLUMN public.users.email IS 'Электронная почта пользователя (используется для входа и уведомлений).';
COMMENT ON COLUMN public.users.username IS 'Уникальное имя пользователя.';
COMMENT ON COLUMN public.users.password_hash IS 'Хэш пароля пользователя (важно для безопасности, хранятся не сами пароли, а их хэши).';

COMMENT ON CONSTRAINT uk_users_email ON public.users IS 'Значение поля `public.users.email` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_users_username ON public.users IS 'Значение поля `public.users.username` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.workflow_statuses(
workflow_id bigint NOT NULL,
status_id bigint NOT NULL,
CONSTRAINT workflow_statuses_pkey PRIMARY KEY (workflow_id, status_id));

COMMENT ON TABLE public.workflow_statuses IS 'Связующая таблица (многие-ко-многим), которая определяет, какие статусы включены в конкретный рабочий процесс.';

COMMENT ON COLUMN public.workflow_statuses.workflow_id IS 'Ссылка на рабочий процесс.';
COMMENT ON COLUMN public.workflow_statuses.status_id IS 'Ссылка на статус.';

CREATE TABLE IF NOT EXISTS public.workflow_transitions(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(255) COLLATE pg_catalog."default" NOT NULL,
from_status_id bigint NOT NULL,
to_status_id bigint NOT NULL,
workflow_id bigint NOT NULL,
CONSTRAINT workflow_transitions_pkey PRIMARY KEY (id),
CONSTRAINT uk_workflow_transitions_unique_pair1 UNIQUE (workflow_id, name),
CONSTRAINT uk_workflow_transitions_unique_pair2 UNIQUE (workflow_id, from_status_id, to_status_id));

COMMENT ON TABLE public.workflow_transitions IS 'Определяет допустимые переходы между статусами внутри одного рабочего процесса. Например, из статуса "Open" можно перейти в "In Progress", но не напрямую в "Closed".';

COMMENT ON COLUMN public.workflow_transitions.id IS 'Уникальный идентификатор перехода.';
COMMENT ON COLUMN public.workflow_transitions.name IS 'Название перехода (например, "Start work", "Resolve issue").';
COMMENT ON COLUMN public.workflow_transitions.from_status_id IS 'Ссылка на исходный статус.';
COMMENT ON COLUMN public.workflow_transitions.to_status_id IS 'Ссылка на целевой статус.';
COMMENT ON COLUMN public.workflow_transitions.workflow_id IS 'Ссылка на рабочий процесс, к которому относится этот переход.';

COMMENT ON CONSTRAINT uk_workflow_transitions_unique_pair1 ON public.workflow_transitions IS 'Значение сочетания полей `public.workflow_transitions.workflow_id` и `public.workflow_transitions.name` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_workflow_transitions_unique_pair2 ON public.workflow_transitions IS 'Значение сочетания полей `public.workflow_transitions.workflow_id`, `public.workflow_transitions.from_status_id` и `public.workflow_transitions.to_status_id` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.workflows(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
is_default boolean NOT NULL DEFAULT false,
name character varying(255) COLLATE pg_catalog."default" NOT NULL,
CONSTRAINT workflows_pkey PRIMARY KEY (id),
CONSTRAINT uk_workflows_name UNIQUE (name));

COMMENT ON TABLE public.workflows IS 'Определяет последовательность статусов и разрешенных переходов между ними для задач. Каждый рабочий процесс описывает жизненный цикл задачи. Например, один рабочий процесс может быть для багов, другой — для историй.';

COMMENT ON COLUMN public.workflows.id IS 'Уникальный идентификатор рабочего процесса.';
COMMENT ON COLUMN public.workflows.is_default IS 'Флаг, указывающий, является ли этот рабочий процесс по умолчанию для системы или определенных типов задач.';
COMMENT ON COLUMN public.workflows.name IS 'Название рабочего процесса.';

COMMENT ON CONSTRAINT uk_workflows_name ON public.workflows IS 'Значение поля `public.workflows.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.comments(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
issue_id bigint NOT NULL,
author_id bigint NOT NULL,
content text COLLATE pg_catalog."default" NOT NULL,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT comments_pkey PRIMARY KEY (id));

COMMENT ON TABLE public.comments IS 'Хранит комментарии, добавленные к задачам. Позволяет пользователям обсуждать и уточнять детали задач.';

COMMENT ON COLUMN public.comments.id IS 'Уникальный идентификатор комментария.';
COMMENT ON COLUMN public.comments.issue_id IS 'Ссылка на задачу, к которой относится комментарий.';
COMMENT ON COLUMN public.comments.author_id IS 'Ссылка на пользователя, который оставил комментарий.';
COMMENT ON COLUMN public.comments.content IS 'Текст комментария.';
COMMENT ON COLUMN public.comments.created_at IS 'Временная метка создания комментария.';
COMMENT ON COLUMN public.comments.updated_at IS 'Временная метка последнего обновления комментария.';

CREATE TABLE IF NOT EXISTS public.activity_log(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
issue_id bigint NOT NULL,
user_id bigint,
action_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
field_name character varying(100) COLLATE pg_catalog."default",
old_value text COLLATE pg_catalog."default",
new_value text COLLATE pg_catalog."default",
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT activity_log_pkey PRIMARY KEY (id));

COMMENT ON TABLE public.activity_log IS 'Записывает все значимые изменения и действия, происходящие с задачами (например, изменение статуса, назначение исполнителя, обновление описания, добавление комментария/вложения). Позволяет просматривать историю изменений задачи.';

COMMENT ON COLUMN public.activity_log.id IS 'Уникальный идентификатор записи журнала.';
COMMENT ON COLUMN public.activity_log.issue_id IS 'Ссылка на задачу, к которой относится запись.';
COMMENT ON COLUMN public.activity_log.user_id IS 'Ссылка на пользователя, который выполнил действие (может быть NULL для системных действий).';
COMMENT ON COLUMN public.activity_log.action_type IS 'Тип действия (например, "STATUS_CHANGE", "ASSIGNED", "COMMENTED").';
COMMENT ON COLUMN public.activity_log.field_name IS 'Имя поля, которое было изменено (если применимо).';
COMMENT ON COLUMN public.activity_log.old_value IS 'Предыдущее значение поля (если применимо).';
COMMENT ON COLUMN public.activity_log.new_value IS 'Новое значение поля (если применимо).';
COMMENT ON COLUMN public.activity_log.created_at IS 'Временная метка создания.';

CREATE TABLE IF NOT EXISTS public.attachments(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
issue_id bigint NOT NULL,
uploader_id bigint NOT NULL,
file_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
file_type_id bigint NOT NULL,
file_size_bytes bigint NOT NULL,
storage_path character varying(512) COLLATE pg_catalog."default" NOT NULL,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT attachments_pkey PRIMARY KEY (id));

COMMENT ON TABLE public.attachments IS 'Хранит метаданные о файлах, прикрепленных к задачам. Сами файлы обычно хранятся в файловой системе или облачном хранилище, а в БД — только ссылки на них.';

COMMENT ON COLUMN public.attachments.id IS 'Уникальный идентификатор вложения.';
COMMENT ON COLUMN public.attachments.issue_id IS 'Ссылка на задачу, к которой прикреплен файл.';
COMMENT ON COLUMN public.attachments.uploader_id IS 'Ссылка на пользователя, который загрузил файл.';
COMMENT ON COLUMN public.attachments.file_name IS 'Имя файла.';
COMMENT ON COLUMN public.attachments.file_type_id IS 'Ссылка на тип файла из таблицы `file_types`.';
COMMENT ON COLUMN public.attachments.file_size_bytes IS 'Размер файла в байтах.';
COMMENT ON COLUMN public.attachments.storage_path IS 'Путь или URL, указывающий на фактическое местоположение файла.';
COMMENT ON COLUMN public.attachments.created_at IS 'Временная метка загрузки файла.';

CREATE TABLE IF NOT EXISTS public.file_types(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
extension character varying(20) COLLATE pg_catalog."default" NOT NULL,
mime_type character varying(100) COLLATE pg_catalog."default" NOT NULL,
CONSTRAINT file_types_pkey PRIMARY KEY (id),
CONSTRAINT uk_file_types_extension UNIQUE (extension),
CONSTRAINT uk_file_types_mime_type UNIQUE (mime_type));

COMMENT ON TABLE public.file_types IS 'Справочник для хранения известных типов файлов по их расширениям и MIME-типам. Используется для классификации вложений.';

COMMENT ON COLUMN public.file_types.id IS 'Уникальный идентификатор типа файла.';
COMMENT ON COLUMN public.file_types.extension IS 'Расширение файла (например, "png", "pdf").';
COMMENT ON COLUMN public.file_types.mime_type IS 'MIME-тип файла (например, "image/png", "application/pdf").';

COMMENT ON CONSTRAINT uk_file_types_extension ON public.file_types IS 'Значение поля `public.file_types.extension` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_file_types_mime_type ON public.file_types IS 'Значение поля `public.file_types.mime_type` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.issue_link_types(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
inward_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
CONSTRAINT issue_link_types_pkey PRIMARY KEY (id),
CONSTRAINT uk_issue_link_types_name UNIQUE (name),
CONSTRAINT uk_issue_link_types_inward_name UNIQUE (inward_name));

COMMENT ON TABLE public.issue_link_types IS 'Определяет различные виды связей между задачами (например, "blocks" (блокирует), "relates to" (связана с), "duplicates" (дублирует)). Позволяет строить граф зависимостей между задачами.';

COMMENT ON COLUMN public.issue_link_types.id IS 'Уникальный идентификатор типа связи.';
COMMENT ON COLUMN public.issue_link_types.name IS 'Прямое название связи (например: "Blocks", "Clones", "Relates to").';
COMMENT ON COLUMN public.issue_link_types.inward_name IS 'Обратное название связи (например: "is blocked by", "is cloned by", "is related to").';

COMMENT ON CONSTRAINT uk_issue_link_types_name ON public.issue_link_types IS 'Значение поля `public.issue_link_types.name` должно быть уникальным.';
COMMENT ON CONSTRAINT uk_issue_link_types_inward_name ON public.issue_link_types IS 'Значение поля `public.issue_link_types.inward_name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.issue_links(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
source_issue_id bigint NOT NULL,
target_issue_id bigint NOT NULL,
link_type_id bigint NOT NULL,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT issue_links_pkey PRIMARY KEY (id),
CONSTRAINT uk_issue_links_unique_pair1 UNIQUE (source_issue_id, target_issue_id, link_type_id));

COMMENT ON TABLE public.issue_links IS 'Хранит конкретные связи между двумя задачами, используя определенный тип связи.';

COMMENT ON COLUMN public.issue_links.id IS 'Уникальный идентификатор связи.';
COMMENT ON COLUMN public.issue_links.source_issue_id IS 'Ссылка на исходную задачу.';
COMMENT ON COLUMN public.issue_links.target_issue_id IS 'Ссылка на целевую задачу.';
COMMENT ON COLUMN public.issue_links.link_type_id IS 'Ссылка на тип связи из таблицы `issue_link_types`.';
COMMENT ON COLUMN public.issue_links.created_at IS 'Временная метка создания связи.';

COMMENT ON CONSTRAINT uk_issue_links_unique_pair1 ON public.issue_links IS 'Значение сочетания полей `public.issue_links.source_issue_id`, `public.issue_links.target_issue_id` и `public.issue_links.link_type_id` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.issue_watchers(
issue_id bigint NOT NULL,
user_id bigint NOT NULL,
CONSTRAINT issue_watchers_pkey PRIMARY KEY (issue_id, user_id));

COMMENT ON TABLE public.issue_watchers IS 'Хранит список пользователей, которые "наблюдают" за определенной задачей и хотят получать уведомления о её изменениях.';

COMMENT ON COLUMN public.issue_watchers.issue_id IS 'Ссылка на задачу.';
COMMENT ON COLUMN public.issue_watchers.user_id IS 'Ссылка на пользователя-наблюдателя.';

CREATE TABLE IF NOT EXISTS public.roles(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
description text COLLATE pg_catalog."default",
is_system_role boolean NOT NULL DEFAULT FALSE,
CONSTRAINT roles_pkey PRIMARY KEY (id),
CONSTRAINT uk_roles_name UNIQUE (name));

COMMENT ON TABLE public.roles IS 'Определяет различные роли в системе (например, "Administrator" (Администратор), "Developer" (Разработчик), "Viewer" (Наблюдатель)). Роли используются для группировки разрешений.';

COMMENT ON COLUMN public.roles.id IS 'Уникальный идентификатор роли.';
COMMENT ON COLUMN public.roles.name IS 'Название роли (например: "Administrator", "Developer", "Viewer").';
COMMENT ON COLUMN public.roles.description IS 'Описание роли.';
COMMENT ON COLUMN public.roles.is_system_role IS 'Флаг, указывающий, является ли роль встроенной/системной.';

COMMENT ON CONSTRAINT uk_roles_name ON public.roles IS 'Значение поля `public.roles.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.permissions(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
description text COLLATE pg_catalog."default",
CONSTRAINT permissions_pkey PRIMARY KEY (id),
CONSTRAINT uk_permissions_name UNIQUE (name));

COMMENT ON TABLE public.permissions IS 'Определяет атомарные разрешения, которые могут быть предоставлены ролям (например, "BROWSE_PROJECTS" (просмотр проектов), "EDIT_ISSUES" (редактирование задач), "CREATE_ISSUES" (создание задач)).';

COMMENT ON COLUMN public.permissions.id IS 'Уникальный идентификатор разрешения.';
COMMENT ON COLUMN public.permissions.name IS 'Название разрешения (например: "BROWSE_PROJECTS", "EDIT_ISSUES", "CREATE_ISSUES", "DELETE_ISSUES").';
COMMENT ON COLUMN public.permissions.description IS 'Описание разрешения.';

COMMENT ON CONSTRAINT uk_permissions_name ON public.permissions IS 'Значение поля `public.permissions.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.role_permissions(
role_id bigint NOT NULL,
permission_id bigint NOT NULL,
CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id));

COMMENT ON TABLE public.role_permissions IS 'Связующая таблица (многие-ко-многим), которая сопоставляет роли с разрешениями. Определяет, какие разрешения входят в каждую роль.';

COMMENT ON COLUMN public.role_permissions.role_id IS 'Ссылка на роль.';
COMMENT ON COLUMN public.role_permissions.permission_id IS 'Ссылка на разрешение.';

CREATE TABLE IF NOT EXISTS public.project_members(
project_id bigint NOT NULL,
group_id bigint NOT NULL,
role_id bigint NOT NULL,
CONSTRAINT project_members_pkey PRIMARY KEY (project_id, group_id, role_id));

COMMENT ON TABLE public.project_members IS 'Определяет, какие группы имеют какие роли в конкретных проектах. Через это устанавливаются права доступа к проекту для групп пользователей.';

COMMENT ON COLUMN public.project_members.project_id IS 'Ссылка на проект.';
COMMENT ON COLUMN public.project_members.group_id IS 'Ссылка на группу, которой назначена роль в этом проекте.';
COMMENT ON COLUMN public.project_members.role_id IS 'Ссылка на роль, которую эта группа имеет в проекте.';

CREATE TABLE IF NOT EXISTS public.project_issue_type_workflow_defaults(
project_id bigint NOT NULL,
issue_type_id bigint NOT NULL,
workflow_id bigint NOT NULL,
CONSTRAINT project_issue_type_workflow_defaults_pkey PRIMARY KEY (project_id, issue_type_id, workflow_id));

COMMENT ON TABLE public.project_issue_type_workflow_defaults IS 'Позволяет определить, какой рабочий процесс должен использоваться по умолчанию для определенного типа задач в рамках конкретного проекта. Это позволяет проектам иметь кастомизированные рабочие процессы для разных типов задач.';

COMMENT ON COLUMN public.project_issue_type_workflow_defaults.project_id IS 'Ссылка на проект.';
COMMENT ON COLUMN public.project_issue_type_workflow_defaults.issue_type_id IS 'Ссылка на тип задачи.';
COMMENT ON COLUMN public.project_issue_type_workflow_defaults.workflow_id IS 'Ссылка на рабочий процесс, который является умолчанием для этой пары.';

CREATE TABLE IF NOT EXISTS public.notification_templates(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
subject_template text COLLATE pg_catalog."default",
body_template text COLLATE pg_catalog."default" NOT NULL,
template_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
is_active boolean NOT NULL DEFAULT TRUE,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT notification_templates_pkey PRIMARY KEY (id),
CONSTRAINT uk_notification_templates_name UNIQUE (name));

COMMENT ON TABLE public.notification_templates IS 'Хранит параметризованные шаблоны для различных типов уведомлений (например, для электронных писем, внутрисистемных сообщений). Это позволяет легко изменять текст уведомлений без изменения кода.';

COMMENT ON COLUMN public.notification_templates.id IS 'Уникальный идентификатор шаблона.';
COMMENT ON COLUMN public.notification_templates.name IS 'Уникальное имя шаблона (для идентификации в коде).';
COMMENT ON COLUMN public.notification_templates.subject_template IS 'Шаблон для темы уведомления (если применимо, например, для email).';
COMMENT ON COLUMN public.notification_templates.body_template IS 'Основной текст шаблона уведомления (может быть HTML или простой текст).';
COMMENT ON COLUMN public.notification_templates.template_type IS 'Тип канала уведомления (например, "EMAIL", "IN_APP", "SLACK").';
COMMENT ON COLUMN public.notification_templates.is_active IS 'Флаг активности шаблона.';
COMMENT ON COLUMN public.notification_templates.created_at IS 'Временная метка создания шаблона.';
COMMENT ON COLUMN public.notification_templates.updated_at IS 'Временная метка последнего внесения изменений в шаблон.';

COMMENT ON CONSTRAINT uk_notification_templates_name ON public.notification_templates IS 'Значение поля `public.notification_templates.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.user_notification_settings(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
user_id bigint NOT NULL,
notification_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
is_enabled boolean NOT NULL DEFAULT TRUE,
CONSTRAINT user_notification_settings_pkey PRIMARY KEY (id),
CONSTRAINT uk_user_notification_settings_unique UNIQUE (user_id, notification_type));

COMMENT ON TABLE public.user_notification_settings IS 'Позволяет каждому пользователю настраивать, какие типы уведомлений он хочет получать и по каким каналам.';

COMMENT ON COLUMN public.user_notification_settings.id IS 'Уникальный идентификатор настройки.';
COMMENT ON COLUMN public.user_notification_settings.user_id IS 'Ссылка на пользователя.';
COMMENT ON COLUMN public.user_notification_settings.notification_type IS 'Тип уведомления (например, "ISSUE_CREATED_EMAIL", "COMMENT_ADDED_IN_APP"), должен соответствовать логике приложения.';
COMMENT ON COLUMN public.user_notification_settings.is_enabled IS 'Включена ли данная настройка для пользователя.';

COMMENT ON CONSTRAINT uk_user_notification_settings_unique ON public.user_notification_settings IS 'Значение сочетания полей `public.user_notification_settings.user_id` и `public.user_notification_settings.notification_type` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.notification_queue(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
recipient_user_id bigint,
recipient_email character varying(255) COLLATE pg_catalog."default",
template_id bigint,
issue_id bigint,
project_id bigint,
payload jsonb,
status_id bigint NOT NULL,
sent_at timestamp(6) without time zone,
failed_attempts integer NOT NULL DEFAULT 0,
created_at timestamp(6) without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT notification_queue_pkey PRIMARY KEY (id));

COMMENT ON TABLE public.notification_queue IS 'Используется для асинхронной обработки и отправки уведомлений. Приложение добавляет уведомления в эту очередь, а отдельный фоновый процесс забирает их и отправляет, что предотвращает блокировку основного потока выполнения.';

COMMENT ON COLUMN public.notification_queue.id IS 'Уникальный идентификатор записи в очереди.';
COMMENT ON COLUMN public.notification_queue.recipient_user_id IS 'Ссылка на пользователя-получателя (если известен).';
COMMENT ON COLUMN public.notification_queue.recipient_email IS 'Прямой адрес электронной почты (если получатель не зарегистрированный пользователь или нужно отправить на внешний адрес).';
COMMENT ON COLUMN public.notification_queue.template_id IS 'Ссылка на шаблон уведомления, который нужно использовать.';
COMMENT ON COLUMN public.notification_queue.issue_id IS 'Необязательная ссылка на задачу, если уведомление связано с ним (для контекста).';
COMMENT ON COLUMN public.notification_queue.project_id IS 'Необязательная ссылка на проект, если уведомление связано с ним (для контекста).';
COMMENT ON COLUMN public.notification_queue.payload IS 'JSONB-поле для хранения всех переменных данных, которые будут вставлены в шаблон (например, имя задачи, старый/новый статус).';
COMMENT ON COLUMN public.notification_queue.status_id IS 'Ссылка на статус обработки уведомления.';
COMMENT ON COLUMN public.notification_queue.sent_at IS 'Временная метка отправки.';
COMMENT ON COLUMN public.notification_queue.failed_attempts IS 'Количество неудачных попыток отправки.';
COMMENT ON COLUMN public.notification_queue.created_at IS 'Временная метка создания записи в очереди.';

CREATE TABLE IF NOT EXISTS public.notification_statuses(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(20) COLLATE pg_catalog."default" NOT NULL,
is_default boolean NOT NULL DEFAULT false,
CONSTRAINT notification_statuses_pkey PRIMARY KEY (id));

COMMENT ON TABLE public.notification_statuses IS 'Определяет перечень статусов обработки очереди уведомлений.';

COMMENT ON COLUMN public.notification_statuses.id IS 'Уникальный идентификатор статуса уведомления.';
COMMENT ON COLUMN public.notification_statuses.name IS 'Наименование статуса обработки уведомления (например, "PENDING" (ожидает), "SENT" (отправлено), "FAILED" (ошибка)).';
COMMENT ON COLUMN public.notification_statuses.is_default IS 'Флаг, указывающий, является ли этот статус по умолчанию для очереди обработки уведомлений.';

CREATE TABLE IF NOT EXISTS public.groups(
id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
name character varying(100) COLLATE pg_catalog."default" NOT NULL,
description text COLLATE pg_catalog."default",
is_system_group boolean NOT NULL DEFAULT FALSE,
CONSTRAINT groups_pkey PRIMARY KEY (id),
CONSTRAINT uk_groups_name UNIQUE (name));

COMMENT ON TABLE public.groups IS 'Позволяет объединять пользователей в логические группы (например, "Команда разработки", "Команда QA", "Руководители"). Упрощает управление доступом к проектам и массовое назначение прав.';

COMMENT ON COLUMN public.groups.id IS 'Уникальный идентификатор группы.';
COMMENT ON COLUMN public.groups.name IS 'Название группы (например: "Developers", "QA Team", "Admins").';
COMMENT ON COLUMN public.groups.description IS 'Описание группы.';
COMMENT ON COLUMN public.groups.is_system_group IS 'Флаг для системных/встроенных групп.';

COMMENT ON CONSTRAINT uk_groups_name ON public.groups IS 'Значение поля `public.groups.name` должно быть уникальным.';

CREATE TABLE IF NOT EXISTS public.user_groups(
user_id bigint NOT NULL,
group_id bigint NOT NULL,
CONSTRAINT user_groups_pkey PRIMARY KEY (user_id, group_id));

COMMENT ON TABLE public.user_groups IS 'Связующая таблица (многие-ко-многим), которая указывает, какие пользователи входят в какие группы.';

COMMENT ON COLUMN public.user_groups.user_id IS 'Ссылка на пользователя.';
COMMENT ON COLUMN public.user_groups.group_id IS 'Ссылка на группу пользователей.';


-- ***********************************************************************************
--                              FOREIGN KEYS
-- ***********************************************************************************
ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_assignee FOREIGN KEY (assignee_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_issue_type FOREIGN KEY (issue_type_id)
    REFERENCES public.issue_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_reporter FOREIGN KEY (reporter_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_priority FOREIGN KEY (priority_id)
    REFERENCES public.priorities (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_status FOREIGN KEY (status_id)
    REFERENCES public.issue_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT fk_issues_project FOREIGN KEY (project_id)
    REFERENCES public.projects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_issues_assignee ON public.issues IS 'Нельзя удалить пользователя, которому назначена задача.';
COMMENT ON CONSTRAINT fk_issues_issue_type ON public.issues IS 'Нельзя удалить тип задачи, который привязан к задачам.';
COMMENT ON CONSTRAINT fk_issues_reporter ON public.issues IS 'Нельзя удалить пользователя, который является автором задачи.';
COMMENT ON CONSTRAINT fk_issues_priority ON public.issues IS 'Нельзя удалить приоритет, который привязан к задаче.';
COMMENT ON CONSTRAINT fk_issues_status ON public.issues IS 'Нельзя удалить статус, который привязан к задаче.';
COMMENT ON CONSTRAINT fk_issues_workflow ON public.issues IS 'Если удаляется рабочий процесс, его значение в задаче очищается в NULL.';
COMMENT ON CONSTRAINT fk_issues_project ON public.issues IS 'Если удаляется проект, удаляются все его задачи.';

ALTER TABLE IF EXISTS public.projects
    ADD CONSTRAINT fk_projects_lead FOREIGN KEY (lead_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

ALTER TABLE IF EXISTS public.projects
    ADD CONSTRAINT fk_projects_default_workflow FOREIGN KEY (default_workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

COMMENT ON CONSTRAINT fk_projects_lead ON public.projects IS 'Нельзя удалить пользователя являющегося руководителем проекта.';
COMMENT ON CONSTRAINT fk_projects_default_workflow ON public.projects IS 'Если удаляется рабочий процесс, его значение в проекте очищается в NULL.';

ALTER TABLE IF EXISTS public.workflow_statuses
    ADD CONSTRAINT fk_workflow_statuses_status FOREIGN KEY (status_id)
    REFERENCES public.issue_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.workflow_statuses
    ADD CONSTRAINT fk_workflow_statuses_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_workflow_statuses_status ON public.workflow_statuses IS 'Если удаляется статус, удаляются все связанные статусы рабочего процесса.';
COMMENT ON CONSTRAINT fk_workflow_statuses_workflow ON public.workflow_statuses IS 'Если удаляется рабочий процесс, удаляются все связанные статусы рабочего процесса.';

ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT fk_workflow_transitions_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT fk_workflow_transitions_from_status FOREIGN KEY (from_status_id)
    REFERENCES public.issue_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT fk_workflow_transitions_to_status FOREIGN KEY (to_status_id)
    REFERENCES public.issue_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_workflow_transitions_workflow ON public.workflow_transitions IS 'Если удаляется рабочий процесс, удаляются все связанные переходы статуса в рабочем процессе.';
COMMENT ON CONSTRAINT fk_workflow_transitions_from_status ON public.workflow_transitions IS 'Если удаляется статус, удаляются все связанные переходы статуса в рабочем процессе.';
COMMENT ON CONSTRAINT fk_workflow_transitions_to_status ON public.workflow_transitions IS 'Если удаляется статус, удаляются все связанные переходы статуса в рабочем процессе.';

ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT fk_comments_issue FOREIGN KEY (issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT fk_comments_author FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_comments_issue ON public.comments IS 'Если удаляется задача, удаляются все связанные комментарии.';
COMMENT ON CONSTRAINT fk_comments_author ON public.comments IS 'Нельзя удалить пользователя являющегося автором комментария к задаче.';

ALTER TABLE IF EXISTS public.activity_log
    ADD CONSTRAINT fk_activity_log_issue FOREIGN KEY (issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.activity_log
    ADD CONSTRAINT fk_activity_log_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_activity_log_issue ON public.activity_log IS 'Если удаляется задача, удаляются все связанные активности.';
COMMENT ON CONSTRAINT fk_activity_log_user ON public.activity_log IS 'Нельзя удалить пользователя, осуществившего активность.';

ALTER TABLE IF EXISTS public.attachments
    ADD CONSTRAINT fk_attachments_issue FOREIGN KEY (issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.attachments
    ADD CONSTRAINT fk_attachments_uploader FOREIGN KEY (uploader_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_attachments_issue ON public.attachments IS 'Если удаляется задача, удаляются все связанные документы.';
COMMENT ON CONSTRAINT fk_attachments_uploader ON public.attachments IS 'Нельзя удалить пользователя, загрузившего документ.';

ALTER TABLE IF EXISTS public.issue_links
    ADD CONSTRAINT fk_issue_links_source_issue FOREIGN KEY (source_issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.issue_links
    ADD CONSTRAINT fk_issue_links_target_issue FOREIGN KEY (target_issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.issue_links
    ADD CONSTRAINT fk_issue_links_type FOREIGN KEY (link_type_id)
    REFERENCES public.issue_link_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_issue_links_source_issue ON public.issue_links IS 'Если удаляется задача, удаляются все связи задач.';
COMMENT ON CONSTRAINT fk_issue_links_target_issue ON public.issue_links IS 'Если удаляется задача, удаляются все связи задач.';
COMMENT ON CONSTRAINT fk_issue_links_type ON public.issue_links IS 'Нельзя удалить тип связи задачи, пока участвует в определении связей задач.';

ALTER TABLE IF EXISTS public.issue_watchers
    ADD CONSTRAINT fk_issue_watchers_issue FOREIGN KEY (issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.issue_watchers
    ADD CONSTRAINT fk_issue_watchers_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_issue_watchers_issue ON public.issue_watchers IS 'Если удаляется задача, удаляются все связанные наблюдатели задач.';
COMMENT ON CONSTRAINT fk_issue_watchers_user ON public.issue_watchers IS 'Если удаляется пользователь, удаляются все связанные наблюдатели задач.';

ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT fk_role_permissions_role FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.role_permissions
    ADD CONSTRAINT fk_role_permissions_permission FOREIGN KEY (permission_id)
    REFERENCES public.permissions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_role_permissions_role ON public.role_permissions IS 'Если удаляется роль, удаляются все связанные доступы по роли.';
COMMENT ON CONSTRAINT fk_role_permissions_permission ON public.role_permissions IS 'Если удаляется доступ, удаляются все связанные доступы по роли.';

ALTER TABLE IF EXISTS public.project_members
    ADD CONSTRAINT fk_project_members_project FOREIGN KEY (project_id)
    REFERENCES public.projects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.project_members
    ADD CONSTRAINT fk_project_members_group FOREIGN KEY (group_id)
    REFERENCES public.groups (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.project_members
    ADD CONSTRAINT fk_project_members_role FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_project_members_project ON public.project_members IS 'Если удаляется проект, удаляются все связанные члены проекта.';
COMMENT ON CONSTRAINT fk_project_members_group ON public.project_members IS 'Если удаляется группа пользователей, удаляются все связанные члены проекта.';
COMMENT ON CONSTRAINT fk_project_members_role ON public.project_members IS 'Если удаляется роль, удаляются все связанные члены проекта.';

ALTER TABLE IF EXISTS public.project_issue_type_workflow_defaults
    ADD CONSTRAINT fk_pitwd_project FOREIGN KEY (project_id)
    REFERENCES public.projects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.project_issue_type_workflow_defaults
    ADD CONSTRAINT fk_pitwd_issue_type FOREIGN KEY (issue_type_id)
    REFERENCES public.issue_types (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.project_issue_type_workflow_defaults
    ADD CONSTRAINT fk_pitwd_workflow FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_pitwd_project ON public.project_issue_type_workflow_defaults IS 'Если удаляется проект, удаляются все связанные рабочие процессы по умолчанию для проекта/типа задач.';
COMMENT ON CONSTRAINT fk_pitwd_issue_type ON public.project_issue_type_workflow_defaults IS 'Если удаляется тип задачи, удаляются все связанные рабочие процессы по умолчанию для проекта/типа задач.';
COMMENT ON CONSTRAINT fk_pitwd_workflow ON public.project_issue_type_workflow_defaults IS 'Нельзя удалить рабочий процесс, определенный по умолчанию для проекта/типа задач.';

ALTER TABLE IF EXISTS public.user_notification_settings
    ADD CONSTRAINT fk_user_notification_settings_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

COMMENT ON CONSTRAINT fk_user_notification_settings_user ON public.user_notification_settings IS 'Если удаляется пользователь, удаляются все связанные настройки уведомления пользователя.';

ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_queue_recipient_user FOREIGN KEY (recipient_user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_queue_template FOREIGN KEY (template_id)
    REFERENCES public.notification_templates (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_queue_issue FOREIGN KEY (issue_id)
    REFERENCES public.issues (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_queue_project FOREIGN KEY (project_id)
    REFERENCES public.projects (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.notification_queue
    ADD CONSTRAINT fk_notification_queue_status FOREIGN KEY (status_id)
    REFERENCES public.notification_statuses (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE RESTRICT;

COMMENT ON CONSTRAINT fk_notification_queue_recipient_user ON public.notification_queue IS 'При удалении пользователя, являющимся получателем уведомлений, значение получателя устанавливается в NULL.';
COMMENT ON CONSTRAINT fk_notification_queue_template ON public.notification_queue IS 'При удалении шаблона уведомлений, по которым должны отправляться уведомления, значение шаблона устанавливается в NULL.';
COMMENT ON CONSTRAINT fk_notification_queue_issue ON public.notification_queue IS 'Если удаляется задача, удаляется вся связанная очередь уведомлений.';
COMMENT ON CONSTRAINT fk_notification_queue_project ON public.notification_queue IS 'Если удаляется проект, удаляется вся связанная очередь уведомлений.';
COMMENT ON CONSTRAINT fk_notification_queue_status ON public.notification_queue IS 'Нельзя удалить статус обработки уведомления, по которому есть связанная очередь уведомлений.';


-- ***********************************************************************************
--                              INDEXES FOR PERFORMANCE
-- ***********************************************************************************
CREATE INDEX IF NOT EXISTS idx_issues_project_id ON public.issues (project_id);
CREATE INDEX IF NOT EXISTS idx_issues_reporter_id ON public.issues (reporter_id);
CREATE INDEX IF NOT EXISTS idx_issues_assignee_id ON public.issues (assignee_id);
CREATE INDEX IF NOT EXISTS idx_issues_status_id ON public.issues (status_id);
CREATE INDEX IF NOT EXISTS idx_issues_issue_type_id ON public.issues (issue_type_id);
CREATE INDEX IF NOT EXISTS idx_issues_priority_id ON public.issues (priority_id);
CREATE INDEX IF NOT EXISTS idx_issues_created_at ON public.issues (created_at);
CREATE INDEX IF NOT EXISTS idx_issues_updated_at ON public.issues (updated_at);

CREATE INDEX IF NOT EXISTS idx_projects_lead_id ON public.projects (lead_id);
CREATE INDEX IF NOT EXISTS idx_projects_default_workflow_id ON public.projects (default_workflow_id);

CREATE INDEX IF NOT EXISTS idx_comments_issue_id ON public.comments (issue_id);
CREATE INDEX IF NOT EXISTS idx_comments_author_id ON public.comments (author_id);

CREATE INDEX IF NOT EXISTS idx_activity_log_issue_id ON public.activity_log (issue_id);
CREATE INDEX IF NOT EXISTS idx_activity_log_user_id ON public.activity_log (user_id);
CREATE INDEX IF NOT EXISTS idx_activity_log_created_at ON public.activity_log (created_at);

CREATE INDEX IF NOT EXISTS idx_attachments_issue_id ON public.attachments (issue_id);
CREATE INDEX IF NOT EXISTS idx_attachments_uploader_id ON public.attachments (uploader_id);

CREATE INDEX IF NOT EXISTS idx_issue_links_source_issue_id ON public.issue_links (source_issue_id);
CREATE INDEX IF NOT EXISTS idx_issue_links_target_issue_id ON public.issue_links (target_issue_id);
CREATE INDEX IF NOT EXISTS idx_issue_links_link_type_id ON public.issue_links (link_type_id);

CREATE INDEX IF NOT EXISTS idx_issue_watchers_issue_id ON public.issue_watchers (issue_id);
CREATE INDEX IF NOT EXISTS idx_issue_watchers_user_id ON public.issue_watchers (user_id);

CREATE INDEX IF NOT EXISTS idx_role_permissions_role_id ON public.role_permissions (role_id);
CREATE INDEX IF NOT EXISTS idx_role_permissions_permission_id ON public.role_permissions (permission_id);

CREATE INDEX IF NOT EXISTS idx_project_members_project_id ON public.project_members (project_id);
CREATE INDEX IF NOT EXISTS idx_project_members_group_id ON public.project_members (group_id);
CREATE INDEX IF NOT EXISTS idx_project_members_role_id ON public.project_members (role_id);

CREATE INDEX IF NOT EXISTS idx_project_issue_type_workflow_defaults_project_id ON public.project_issue_type_workflow_defaults (project_id);
CREATE INDEX IF NOT EXISTS idx_project_issue_type_workflow_defaults_issue_type_id ON public.project_issue_type_workflow_defaults (issue_type_id);
CREATE INDEX IF NOT EXISTS idx_project_issue_type_workflow_defaults_workflow_id ON public.project_issue_type_workflow_defaults (workflow_id);

CREATE INDEX IF NOT EXISTS idx_notification_templates_name ON public.notification_templates (name);

CREATE INDEX IF NOT EXISTS idx_user_notification_settings_user_id ON public.user_notification_settings (user_id);

CREATE INDEX IF NOT EXISTS idx_notification_queue_recipient_user_id ON public.notification_queue (recipient_user_id);
CREATE INDEX IF NOT EXISTS idx_notification_queue_status_id ON public.notification_queue (status_id);
CREATE INDEX IF NOT EXISTS idx_notification_queue_created_at ON public.notification_queue (created_at);

CREATE UNIQUE INDEX IF NOT EXISTS ux_notification_statuses_default_only_one ON public.notification_statuses (is_default) WHERE is_default = TRUE;
COMMENT ON INDEX public.ux_notification_statuses_default_only_one IS 'Гарантировано может быть только один статус со значением по умолчанию TRUE.';

CREATE INDEX IF NOT EXISTS idx_groups_name ON public.groups (name);

CREATE INDEX IF NOT EXISTS idx_user_groups_user_id ON public.user_groups (user_id);
CREATE INDEX IF NOT EXISTS idx_user_groups_group_id ON public.user_groups (group_id);

COMMIT;
